# -*- coding: utf-8 -*-
"""
Created on Thu Aug 14 15:49:53 2025

@author: user
"""


from qm import QuantumMachinesManager
from qm.qua import *
from qm import SimulationConfig
import matplotlib.pyplot as plt
from configuration_odmr_CHJ import *
from qualang_tools.results.data_handler import DataHandler

##################
#   Parameters   #
##################
# Parameters Definition
f_vec = np.arange(-20 * u.MHz, 20 * u.MHz, 1 * u.MHz)  # Frequency vector
n_avg = 1_000_000 # number of averages 1_000_000
readout_len = long_meas_len_1  # Readout duration for this experiment

# Data to save
save_data_dict = {
    "n_avg": n_avg,
    "IF_frequencies": f_vec,
    "config": config,
}


###################
# Galvo parameter #
###################

# NV 좌표
x_want = 0.11
y_want = 0.09

## NV_(0.013, -0.025)
## Wire_(-0.03,0)

# 천천히 돌리기 위한 parameter
galvo_ramp_time = 1_000_000 * u.ns // 4
ramp_x_volt = (x_want)/(galvo_ramp_time*4)
ramp_y_volt = (y_want)/(galvo_ramp_time*4) 


###################
# The QUA program #
###################

with program() as cw_odmr :  
    times = declare(int, size=100)  # QUA vector for storing the time-tags
    counts = declare(int)  # variable for number of counts
    counts_st = declare_stream()  # stream for counts
    counts_dark_st = declare_stream()  # stream for counts
    f = declare(int)  # frequencies
    n = declare(int)  # number of iterations
    n_st = declare_stream()  # stream for number of iterations
    
    a = declare(int) # 첫 galvo mirror 이동용 변수 지정_아무런 의미 없음_그냥 루프용 변수
    b = declare(int)
    
    
    with for_(a, 0, a < 6, a+1):
        play(ramp(ramp_x_volt/6), "mirror_x", duration = galvo_ramp_time + (a*0))
    with for_(b, 0, b < 6, b+1):
        play(ramp(ramp_y_volt/6), "mirror_y", duration = galvo_ramp_time + (b*0))

    # x, y mirror (x_want, y_want)로 이동

    with for_(n, 0, n < n_avg, n + 1):  
        #n_avg 만큼 측정하여 평균
        with for_(*from_array(f, f_vec)):
            # 각 n값에 대해 RF_scan loop
            # f_vec에서 f값 하나씩 빼서 측정
            # 즉, 주파수 한 세트당 전체 스캔
            # Update the frequency of the digital oscillator linked to the element "NV"
            update_frequency("NV", f)
            # align all elements before starting the sequence
            align()
            # Play the mw pulse...
            play("cw" * amp(1), "NV", duration=readout_len * u.ns)
            # ... and the laser pulse simultaneously (the laser pulse is delayed by 'laser_delay_1')
            play("laser_ON", "AOM1", duration=readout_len * u.ns)
            wait(5_00 * u.ns, "SPCM1")  # so readout don't catch the first part of spin reinitialization
            ###
            # -> wait = 1000이 origin인데, 100으로 줄임
            # sequence 상으로 AOM 안에 SPCM 넣기 위함.
            # 이에 dark count 부분도 100으로 조정
            # 추가로 SPCM의 작동 시간=측정시간은 readout_len*0.9배로 조정해봐도 좋을듯?
            # 하지만, RF Sweep 시에 각 chunk의 
            # 마지막 부분이 짤릴 수 있으므로 기존 code 그대로 수행
            ###
            
            # Measure and detect the photons on SPCM1
            measure("long_readout", "SPCM1", time_tagging.analog(times, readout_len, counts))
            #measure("long_readout", "SPCM1", None, time_tagging.analog(times,readout_len, counts))

            save(counts, counts_st)  # save counts on stream

            # Wait and align all elements before measuring the dark events
            wait(wait_between_runs * u.ns)
            align()  # align all elements
            # Play the mw pulse with zero amplitude...
            play("cw" * amp(0), "NV", duration=readout_len * u.ns)
            # ... and the laser pulse simultaneously (the laser pulse is delayed by 'laser_delay_1')
            play("laser_ON", "AOM1", duration=readout_len * u.ns)
            wait(5_00 * u.ns, "SPCM1")  # so readout don't catch the first part of spin reinitialization
            measure("long_readout", "SPCM1", time_tagging.analog(times, readout_len, counts))
            #measure("long_readout", "SPCM1", None, time_tagging.analog(times,readout_len, counts))
            save(counts, counts_dark_st)  # save counts on stream

            wait(wait_between_runs * u.ns)

            save(n, n_st)  # save number of iteration inside for_loop
            
    ramp_to_zero("mirror_x", duration = galvo_ramp_time*12)                                 # 9. x ramp to zero voltage                             
    ramp_to_zero("mirror_y", duration = galvo_ramp_time*12)  

    with stream_processing():
        # Cast the data into a 1D vector, average the 1D vectors together and store the results on the OPX processor
        counts_st.buffer(len(f_vec)).average().save("counts")
        counts_dark_st.buffer(len(f_vec)).average().save("counts_dark")
        n_st.save("iteration")

#####################################
#  Open Communication with the QOP  #
#####################################
# qmm = QuantumMachinesManager(host=qop_ip, cluster_name=cluster_name)
qmm = QuantumMachinesManager(host=qop_ip, port=qop_port)

#######################
# Simulate or execute #
#######################
simulate = False

if simulate:
    # Simulates the QUA program for the specified duration
    simulation_config = SimulationConfig(duration=10_000_0)  # In clock cycles = 4ns
    # Simulate blocks python until the simulation is done
    job = qmm.simulate(config, cw_odmr, simulation_config)
    # Get the simulated samples
    samples = job.get_simulated_samples()
    # Plot the simulated samples
    samples.con1.plot()
    # Get the waveform report object
    waveform_report = job.get_simulated_waveform_report()
   
    # # Cast the waveform report to a python dictionary
    # waveform_dict = waveform_report.to_dict()
    # # Visualize and save the waveform report
    # waveform_report.create_plot(samples, plot=True, save_path=str(Path(__file__).resolve()))
else:
    # Open the quantum machine
    qm = qmm.open_qm(config)
    # Send the QUA program to the OPX, which compiles and executes it
    job = qm.execute(cw_odmr)
    # Get results from QUA program
    results = fetching_tool(job, data_list=["counts", "counts_dark", "iteration"], mode="live")
    # Live plotting
    fig = plt.figure()
    interrupt_on_close(fig, job)  # Interrupts the job when closing the figure

    while results.is_processing():
        # Fetch results
        counts, counts_dark, iteration = results.fetch_all()
        # Progress bar
        progress_counter(iteration, n_avg, start_time=results.get_start_time())
        # Plot data
        plt.cla()
        # plt.plot((NV_LO_freq * 0 + f_vec) / u.MHz, counts / 1000 / (readout_len * 1e-9), label="photon counts")
        plt.plot((NV_LO_freq * 0 + f_vec) / u.MHz, counts  / (readout_len * 1e-9), label="photon counts")
       
        # plt.plot((NV_LO_freq * 0 + f_vec) / u.MHz, counts_dark / 1000 / (readout_len * 1e-9), label="dark counts")
        plt.plot((NV_LO_freq * 0 + f_vec) / u.MHz, counts_dark  / (readout_len * 1e-9), label="dark counts")

        plt.xlabel("MW frequency [MHz]")
        
        # plt.ylabel("Intensity [kcps]")
        plt.ylabel("Intensity [cps]")


        plt.title("ODMR")
        plt.legend()
        plt.pause(0.1)
    # Save results
    script_name = Path(__file__).name
    data_handler = DataHandler(root_data_folder=save_dir)
    save_data_dict.update({"counts_data": counts})
    save_data_dict.update({"counts_dark_data": counts_dark})
    save_data_dict.update({"fig_live": fig})
    data_handler.additional_files = {script_name: script_name, **default_additional_files}
    data_handler.save_data(data=save_data_dict, name="_".join(script_name.split("_")[1:]).split(".")[0])
